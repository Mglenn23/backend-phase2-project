'use strict'
/* eslint-env mocha */

const { expect } = require('chai')
const formatModule = require('.')

describe('The format module interface', function () {
  it('Is an object', function (done) {
    expect(formatModule).to.be.an.object
    done()
  })

  it('With a "table" object', function (done) {
    expect(formatModule.table).to.exist
    expect(formatModule.table).to.be.an.object
    done()
  })

  describe('format.defaultFormatters()', function () {
    const fn = formatModule.defaultFormatters

    it('Should be a function', function (done) {
      expect(fn).to.be.a.function
      done()
    })
    it('Should return an array of all default formatters', function (done) {
      expect(fn()).to.be.an.Array
      expect(fn().length).to.equal(41)
      expect(fn()).to.be.deep.equal(Object.keys(formatModule.table))
      done()
    })
  })

  describe('format.parse(formatters)', function () {
    const fn = formatModule.parse

    it('Should be a function', function (done) {
      expect(fn).to.be.a.function
      done()
    })
    it('Should take one parameter', function (done) {
      expect(fn.length).to.equal(1)
      done()
    })
    it('Should return all 41 default formatters if no param is passed', function (done) {
      expect(fn()).to.deep.equal(formatModule.defaultFormatters())
      expect(fn([])).to.deep.equal(formatModule.defaultFormatters())
      done()
    })
    it('Should clean any non-standard formatters', function (done) {
      expect(fn(['bananas', '%H'])).to.deep.equal(['%H'])
      expect(fn(['this', 'will', 'be', 'trimmed'])).to.deep.equal([])
      done()
    })
    it('Should ignore non-standard param types', function (done) {
      expect(fn('this is interesting...')).to.deep.equal(formatModule.defaultFormatters())
      expect(fn(12345)).to.deep.equal(formatModule.defaultFormatters())
      expect(fn(true)).to.deep.equal(formatModule.defaultFormatters())
      expect(fn(false)).to.deep.equal(formatModule.defaultFormatters())
      done()
    })
  })
})
