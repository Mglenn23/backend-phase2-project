'use strict'

const { compose, contains, curry, filter, join, prop, split, toLower } = require('ramda')

// commitDivider :: * -> String
const commitDivider = () => '\u001F'

// lineDivider :: * -> String
const lineDivider = () => '\u001E'

// countMatches :: ([String], String) -> Int
const countMatches = (array, string) => filter(item => contains(item, string), array).length

module.exports = {

// lowerSubjectProp :: Obj -> String
  lowerSubjectProp: compose(toLower, prop('subject')),

// countMatches :: ([String] -> String) -> Int
  countMatches: curry(countMatches),

// combineArrValuesAsSemver :: [A] -> [A] -> [A]
  combineArrValuesAsSemver: curry((first, second) => {
    return first.reduce((memo, current, index) => {
      if (index === 2 && second[1] > 0) return memo.concat(second[2])
      return memo.concat([current + second[index]])
    }, [])
  }),

// toInt :: String -> Int
  toInt: i => +i,

// dotSplit :: String -> [String]
  dotSplit: split('.'),

// dotJoin :: [String] -> String
  dotJoin: join('.'),

  lineDivider,
  commitDivider,

// commitSplit :: [String] -> String
  commitSplit: split(commitDivider()),

// commitJoin :: String -> [String]
  commitJoin: join(commitDivider()),

// lineSplit :: String -> [String]
  lineSplit: split(lineDivider()),

// lineJoin :: [String] -> String
  lineJoin: join(lineDivider()),

// trimText :: String -> [Array]
  trimText: compose(filter(x => !!x), split('\n'))
}
