'use strict'

const { compose, filter, head, map, match } = require('ramda')
const { countMatches, combineArrValuesAsSemver, lowerSubjectProp, dotSplit, dotJoin,
        toInt } = require('../utils')

// matchSemVer :: String -> [String]
const matchSemVer = match(/\d{1,3}.\d{1,5}.\d{1,5}/)

// arrayifySemver :: String -> [Int]
const arrayifySemver = compose(map(toInt), dotSplit, head, matchSemVer)

module.exports = GitVersion

/**
 * Module init function.
 * @method GitVersion
 * @param  {Array}    commits           Parsed array of git commits
 * @param  {String}   [currentVersion]  SemVer representation of the current version
 */
function GitVersion ({ commits, currentVersion }) {
  function version (keywords, suppliedVersion) {
    const version = arrayifySemver(suppliedVersion || currentVersion)
    const minorPredicate = compose(countMatches(keywords.minor), lowerSubjectProp)
    const patchPredicate = compose(countMatches(keywords.patch), lowerSubjectProp)

    const minors = filter(minorPredicate, commits)
    const patches = filter(patchPredicate, commits)

    const minorValue = (minors.length > 0) ? 1 : minors.length
    const patchValue = (minorValue > 0) ? 0 : (patches.length > 0) ? 1 : 0

    const diff = [ 0, minorValue, patchValue ]

    return {
      current: dotJoin(version),
      diff: dotJoin(diff),
      next: compose(dotJoin, combineArrValuesAsSemver(version))(diff),
      commits: { minors, patches }
    }
  }

  return {
    version
  }
}
