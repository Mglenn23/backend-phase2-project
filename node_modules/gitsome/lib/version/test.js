'use strict'
/* eslint-env mocha */

const { expect } = require('chai')
const versionModule = require('.')

const zeroOneTwoCommits = [
  { subject: 'merge' },
  { subject: 'patch' },
  { subject: 'fix' }
]

const zeroOneTwoParam = { commits: zeroOneTwoCommits, currentVersion: '1.0.0' }
const dummyParam = { commits: [], currentVersion: '1.0.0' }

describe('The version module interface', function () {
  it('Is a function', function (done) {
    expect(versionModule).to.be.a.function
    done()
  })

  it('Takes one parameter', function (done) {
    expect(versionModule.length).to.equal(1)
    done()
  })

  it('Returns a function', function (done) {
    expect(versionModule(dummyParam)).to.be.a.function
    done()
  })
})

describe('The version function, with "merge", "patch", "fix" commits and 1.0.0 as currentVersion', function () {
  const keywords = { minor: ['merge'], patch: ['patch', 'fix'] }
  const versionFn = versionModule(zeroOneTwoParam).version

  it('Aggregates multiple (1 minor, 2 patch) matches into one clean version bump (1 minor)', function (done) {
    expect(versionFn(keywords).diff).to.equal('0.1.0')
    done()
  })

  it('Gives a "next" of 1.1.0', function (done) {
    expect(versionFn(keywords).next).to.equal('1.1.0')
    done()
  })

  it('Gives a "next" which uses the version passed to the module', function (done) {
    expect(versionFn(keywords).next).to.equal('1.1.0')
    done()
  })

  it('Gives a "next" which respects the value passed into to versionFn', function (done) {
    expect(versionFn(keywords, '5.5.0').next).to.equal('5.6.0')
    done()
  })
})
